/*

import lib

<link rel="stylesheet" href="/css/slick.grid.css" type="text/css" media="screen" charset="utf-8" />


<script src="http://miki.aqalert.net/javascript/slick.core.js"></script>
<script src="http://miki.aqalert.net/javascript/slick.cellrangeselector.js"></script>
<script src="http://miki.aqalert.net/javascript/slick.cellselectionmodel.js"></script>
<script src="http://miki.aqalert.net/javascript/slick.rowselectionmodel.js"></script>
<script src="http://miki.aqalert.net/javascript/slick.rowmovemanager.js"></script>
<script src="http://miki.aqalert.net/javascript/slick.editors.js"></script>
<script src="http://miki.aqalert.net/javascript/slick.grid.js"></script>

*/

head('http://miki.aqalert.net/javascript/slick.core.js',
     'http://miki.aqalert.net/javascript/slick.cellrangeselector.js',
     'http://miki.aqalert.net/javascript/slick.cellselectionmodel.js',
     'http://miki.aqalert.net/javascript/slick.rowselectionmodel.js',
     'http://miki.aqalert.net/javascript/slick.rowmovemanager.js',
     'http://miki.aqalert.net/javascript/slick.editors.js',
     'http://miki.aqalert.net/javascript/slick.grid.js',
     function(){

var rowNum = 8; 

nugget.out( "<a href='#' id='savetasks'>Save Tasks</a> " );
nugget.out( "<a href='#' id='addrow'>Add Row</a> " );
nugget.setHTML();

var grid;
var data = nugget.data();

var columns = [
 {
  id: "#",
  name: "",
  width: 40,
  behavior: "selectAndMove",
  unselectable: true,   
  resizable: false,
  cssClass: "cell-reorder dnd"            
 },{
  id:"title", 
  name:"Owner", 
  field:"title", 
  width:60, 
  cssClass:"cell-title", 
  editor:TextCellEditor, 
  validator:requiredFieldValidator
 },{
   id:"desc", 
   name:"Description", 
   field:"description", 
   width:300, 
   editor:LongTextCellEditor
 },{
   id:"duration", 
   name:"Duration", 
   field:"duration", 
   editor:TextCellEditor
 },{
   id:"%", 
   name:"% Complete", 
   field:"percentComplete", 
   width:120, 
   resizable:false, 
   formatter:GraphicalPercentCompleteCellFormatter, 
   editor:PercentCompleteCellEditor
 },{
   id:"start", 
   name:"Start", 
   field:"start", 
   minWidth:120, 
   editor:DateCellEditor
 },{
   id:"finish", 
   name:"Finish", 
   field:"finish", 
   minWidth:120, 
   editor:DateCellEditor
 },{
   id:"priority", 
   name:"Priority", 
   width:120, 
   minWidth:20, 
   maxWidth:80, 
   cssClass:"cell-effort-driven", 
   field:"priority", 
   formatter:BoolCellFormatter, 
   editor:YesNoCheckboxCellEditor
 }
];

var options = {
  editable: true,
  enableAddRow: true,
  enableRowReordering: true,
  enableCellNavigation: true,
  forceFitColumns: true,
  autoEdit: false
};

function requiredFieldValidator(value) {
  if (value == null || value == undefined || !value.length)
    return {valid:false, msg:"This is a required field"};
  else
    return {valid:true, msg:null};
}

$(function()
  {
    if (data.length == 0) {
      for (var i=0; i< rowNum; i++) {
        var d = (data[i] = {});
        
        d["title"] = 'name';
        d["description"] = "task description";
        d["duration"] = "2 days";
        d["percentComplete"] = Math.round(Math.random() * 100);
        d["start"] = "01/01/2011";
        d["finish"] = "01/05/2011";
        d["priority"] = (i % 5 == 0);
      }
    }      

    grid = new Slick.Grid("#myGrid", data, columns, options);
      
    grid.setSelectionModel(new Slick.RowSelectionModel());
      
      var moveRowsPlugin = new Slick.RowMoveManager();
      
      moveRowsPlugin.onBeforeMoveRows.subscribe(function(e,data) {
        for (var i = 0; i < data.rows.length; i++) {
          if (data.rows[i] == data.insertBefore || data.rows[i] == data.insertBefore - 1) {
            e.stopPropagation();
            return false;
          }
        }
        
        return true;
      });
      
      moveRowsPlugin.onMoveRows.subscribe(function(e,args) {
        var extractedRows = [], left, right;
        var rows = args.rows;
        var insertBefore = args.insertBefore;
        left = data.slice(0,insertBefore);
        right = data.slice(insertBefore,data.length);
        
        for (var i=0; i<rows.length; i++) {
          extractedRows.push(data[rows[i]]);
        }
        
        rows.sort().reverse();
        
        for (var i=0; i<rows.length; i++) {
          var row = rows[i];
          if (row < insertBefore)
            left.splice(row,1);
          else
            right.splice(row-insertBefore,1);
        }
        
        data = left.concat(extractedRows.concat(right));
        
        var selectedRows = [];
        for (var i=0; i<rows.length; i++)
          selectedRows.push(left.length+i);
        
        grid.resetActiveCell();
        grid.setData(data);
        grid.setSelectedRows(selectedRows);
        grid.render();
      });
      
      grid.registerPlugin(moveRowsPlugin);
      
      grid.onDragInit.subscribe(function(e,dd) {
        var cell = grid.getCellFromEvent(e);
        if (!cell)
          return false;
        
        dd.row = cell.row;
        if (!data[dd.row])
          return false;
        
        if (Slick.GlobalEditorLock.isActive())
          return false;
        
        e.stopImmediatePropagation();
        dd.mode = "recycle";
      });
      
      grid.onDragStart.subscribe(function(e,dd) {
        if (dd.mode != "recycle") {
          return;
            }
        
        e.stopImmediatePropagation();
        
        var selectedRows = grid.getSelectedRows();
        
        if (!selectedRows.length || $.inArray(dd.row,selectedRows) == -1) {
          selectedRows = [dd.row];
          grid.setSelectedRows(selectedRows);
        }
        
        dd.rows = selectedRows;
        dd.count = selectedRows.length;
        
        var proxy = $("<span></span>")
            .css({
              position: "absolute",
              display: "inline-block",
              padding: "4px 10px",
              background: "#e0e0e0",
              border: "1px solid gray",
              "z-index": 99999,
              "-moz-border-radius": "8px",
              "-moz-box-shadow": "2px 2px 6px silver"
            })
            .text("Drag to Recycle Bin to delete " + dd.count + " selected row(s)")
            .appendTo("body");
        
        dd.helper = proxy;
        
        $(dd.available).css("background","pink");
        
        return proxy;
      });
      
      grid.onDrag.subscribe(function(e,dd) {
        if (dd.mode != "recycle") {
          return;
            }
        e.stopImmediatePropagation();
        dd.helper.css({top: e.pageY + 5, left: e.pageX + 5});
      });
      
      grid.onDragEnd.subscribe(function(e,dd) {
        if (dd.mode != "recycle") {
          return;
            }
        e.stopImmediatePropagation();
        dd.helper.remove();
        $(dd.available).css("background","fff");
      });
      
      
      $("#dropzone")
        .bind("dropstart", function(e,dd) {
          $(this).css("background","yellow");
        })
        .bind("dropend", function(e,dd) {
          $(dd.available).css("background","pink");
        })
        .bind("drop", function(e,dd) {
          var rowsToDelete = dd.rows.sort().reverse();
          for (var i=0; i<rowsToDelete.length; i++) {
            data.splice(rowsToDelete[i],1);
          }
          grid.invalidate();
          grid.setSelectedRows([]);
        });
      
      
      grid.onAddNewRow = function(newItem,columnDef) {
        var item = {title:"name", description:"task description", duration:"1 day", percentComplete:0,start:"00/00/0000",finish:"", complete: false, priority:(data.length+1) % 5 == 0};
        
        $.extend(item,newItem);
        data.push(item);
        grid.invalidateRows([data.length - 1]);
        grid.updateRowCount();
        grid.render();
      };
    
    
    var saveTasks = function(){
      nugget.updateJSON( data );
    }         

    $('#savetasks').click(saveTasks);
    $('#addrow').click( grid.onAddNewRow );
    
  });

});
  
